{"ast":null,"code":"import * as _deepClone from \"clone-deep\";\nimport { ToastsStore } from \"react-toasts\";\nimport moment from \"moment\";\nexport var deepClone = function deepClone(data) {\n  return _deepClone(data);\n};\nexport var showToast = function showToast(message) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"error\";\n  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4000;\n  ToastsStore[type](message, duration);\n};\nexport var sleepTime = function sleepTime(n) {\n  return new Promise(function (r) {\n    return setTimeout(function () {\n      return r();\n    }, n);\n  });\n};\nexport var getPostedDateValue = function getPostedDateValue(postedDate) {\n  if (moment().isSame(postedDate, \"year\")) {\n    return moment(postedDate).format(\"MMM DD\");\n  } else {\n    return moment(postedDate).format(\"MMM DD, YYYY\");\n  }\n};\nexport var sortedThreads = function sortedThreads(arr, attr) {\n  return arr.sort(function (t1, t2) {\n    return new Date(t2[attr]) - new Date(t1[attr]);\n  });\n};\nexport var formatCurrencyValue = function formatCurrencyValue(data) {\n  var formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n  return formatter.format(data);\n  /* $2,500.00 */\n};\nexport var capitalize = function capitalize(s) {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\nexport var getPhoneNumberFromBrackets = function getPhoneNumberFromBrackets(number) {\n  return number.split(')')[1] ? number.split(')')[1] : number;\n};","map":{"version":3,"sources":["/home/sanjay/Desktop/LS/React/Socialaffil-admin-UI/src/helper-methods/index.js"],"names":["_deepClone","ToastsStore","moment","deepClone","data","showToast","message","type","duration","sleepTime","n","Promise","r","setTimeout","getPostedDateValue","postedDate","isSame","format","sortedThreads","arr","attr","sort","t1","t2","Date","formatCurrencyValue","formatter","Intl","NumberFormat","style","currency","capitalize","s","charAt","toUpperCase","slice","getPhoneNumberFromBrackets","number","split"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,YAA5B;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAU;AACjC,SAAOJ,UAAU,CAACI,IAAD,CAAjB;AACD,CAFM;AAIP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAA8C;AAAA,MAApCC,IAAoC,uEAA7B,OAA6B;AAAA,MAApBC,QAAoB,uEAAT,IAAS;AACrEP,EAAAA,WAAW,CAACM,IAAD,CAAX,CAAkBD,OAAlB,EAA2BE,QAA3B;AACD,CAFM;AAIP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,CAAD;AAAA,SAAO,IAAIC,OAAJ,CAAY,UAACC,CAAD;AAAA,WAAOC,UAAU,CAAC;AAAA,aAAMD,CAAC,EAAP;AAAA,KAAD,EAAYF,CAAZ,CAAjB;AAAA,GAAZ,CAAP;AAAA,CAAlB;AAEP,OAAO,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,UAAD,EAAgB;AAChD,MAAIb,MAAM,GAAGc,MAAT,CAAgBD,UAAhB,EAA4B,MAA5B,CAAJ,EAAyC;AACvC,WAAOb,MAAM,CAACa,UAAD,CAAN,CAAmBE,MAAnB,CAA0B,QAA1B,CAAP;AACD,GAFD,MAEO;AACL,WAAOf,MAAM,CAACa,UAAD,CAAN,CAAmBE,MAAnB,CAA0B,cAA1B,CAAP;AACD;AACF,CANM;AAQP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,IAAN,EAAe;AAC1C,SAAOD,GAAG,CAACE,IAAJ,CAAS,UAACC,EAAD,EAAKC,EAAL,EAAY;AAC1B,WAAO,IAAIC,IAAJ,CAASD,EAAE,CAACH,IAAD,CAAX,IAAqB,IAAII,IAAJ,CAASF,EAAE,CAACF,IAAD,CAAX,CAA5B;AACD,GAFM,CAAP;AAGD,CAJM;AAMP,OAAO,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACrB,IAAD,EAAU;AAC3C,MAAIsB,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAC7CC,IAAAA,KAAK,EAAE,UADsC;AAE7CC,IAAAA,QAAQ,EAAE;AAFmC,GAA/B,CAAhB;AAIA,SAAOJ,SAAS,CAACT,MAAV,CAAiBb,IAAjB,CAAP;AAA+B;AAChC,CANM;AAQP,OAAO,IAAM2B,UAAU,GAAG,SAAbA,UAAa,CAAAC,CAAC,EAAI;AAC7B,MAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B,OAAO,EAAP;AAC3B,SAAOA,CAAC,CAACC,MAAF,CAAS,CAAT,EAAYC,WAAZ,KAA4BF,CAAC,CAACG,KAAF,CAAQ,CAAR,CAAnC;AACD,CAHM;AAIP,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,MAAD,EAAY;AACpD,SACEA,MAAM,CAACC,KAAP,CAAa,GAAb,EAAkB,CAAlB,IAAwBD,MAAM,CAACC,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAxB,GAAgDD,MADlD;AAGD,CAJM","sourcesContent":["import * as _deepClone from \"clone-deep\";\nimport { ToastsStore } from \"react-toasts\";\nimport moment from \"moment\";\n\nexport const deepClone = (data) => {\n  return _deepClone(data);\n};\n\nexport const showToast = (message, type = \"error\", duration = 4000) => {\n  ToastsStore[type](message, duration);\n};\n\nexport const sleepTime = (n) => new Promise((r) => setTimeout(() => r(), n));\n\nexport const getPostedDateValue = (postedDate) => {\n  if (moment().isSame(postedDate, \"year\")) {\n    return moment(postedDate).format(\"MMM DD\");\n  } else {\n    return moment(postedDate).format(\"MMM DD, YYYY\");\n  }\n};\n\nexport const sortedThreads = (arr, attr) => {\n  return arr.sort((t1, t2) => {\n    return new Date(t2[attr]) - new Date(t1[attr]);\n  });\n};\n\nexport const formatCurrencyValue = (data) => {\n  var formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n  return formatter.format(data); /* $2,500.00 */\n};\n\nexport const capitalize = s => {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\nexport const getPhoneNumberFromBrackets = (number) => {\n  return (\n    number.split(')')[1] ? (number.split(')')[1]) : number\n  )\n}\n"]},"metadata":{},"sourceType":"module"}