{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport JavascriptTimeAgo from 'javascript-time-ago';\nimport { style } from 'javascript-time-ago/prop-types';\nimport createVerboseDateFormatter from './verboseDateFormatter';\nimport { getDate, getTime, isMockedDate } from './helpers/date'; // `PureComponent` is only available in React >= 15.3.0.\n\nvar PureComponent = React.PureComponent || React.Component;\nvar MINUTE = 60 * 1000;\nvar HOUR = 60 * MINUTE;\nvar DAY = 24 * HOUR;\nvar MONTH = 30 * DAY;\nvar YEAR = 365 * DAY; // For standard `timeStyle`s, \"smart\" autoupdate interval is used:\n// every minute for the first hour, then every 10 minutes for the first 12 hours, and so on.\n// \"Smart\" autoupdate intervals should be moved to `javascript-time-ago`'s grading scale.\n\nvar INTERVALS = [{\n  interval: MINUTE\n}, {\n  threshold: HOUR,\n  interval: 10 * MINUTE\n}, {\n  threshold: 12 * HOUR,\n  interval: 20 * MINUTE\n}, {\n  threshold: DAY,\n  interval: 3 * HOUR\n}, {\n  threshold: 7 * DAY,\n  interval: 6 * HOUR\n}, {\n  threshold: MONTH,\n  interval: 5 * DAY\n}, {\n  threshold: 3 * MONTH,\n  interval: 10 * DAY\n}, {\n  threshold: YEAR,\n  interval: MONTH\n}]; // `setTimeout()` would enter an infinite cycle when interval is a `MONTH`.\n// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values\n\nvar SET_TIMEOUT_MAX_DELAY = 2147483647;\n\nvar ReactTimeAgo = function (_PureComponent) {\n  _inherits(ReactTimeAgo, _PureComponent);\n\n  function ReactTimeAgo(props) {\n    _classCallCheck(this, ReactTimeAgo); // Create `javascript-time-ago` formatter instance.\n\n\n    var _this = _possibleConstructorReturn(this, (ReactTimeAgo.__proto__ || Object.getPrototypeOf(ReactTimeAgo)).call(this, props)); // `this.props` are used in `.getPreferredLocales()`.\n\n\n    _this.timeAgo = new JavascriptTimeAgo(_this.getPreferredLocales()); // Create verbose date formatter for the tooltip text.\n    // (only on client side, because tooltips aren't rendered until triggered)\n\n    if (typeof window !== 'undefined') {\n      var verboseDateFormat = _this.props.verboseDateFormat;\n      _this.formatVerboseDate = createVerboseDateFormatter(_this.getPreferredLocales(), verboseDateFormat);\n    }\n\n    return _this;\n  }\n\n  _createClass(ReactTimeAgo, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var tick = this.props.tick; // If time label autoupdates are enabled.\n\n      if (tick) {\n        this.scheduleNextTick();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.autoUpdateTimer);\n    }\n  }, {\n    key: 'scheduleNextTick',\n    value: function scheduleNextTick() {\n      var _this2 = this; // Register for the relative time autoupdate as the time goes by.\n\n\n      this.autoUpdateTimer = setTimeout(function () {\n        _this2.forceUpdate();\n\n        _this2.scheduleNextTick();\n      }, this.getNextAutoUpdateDelay());\n    }\n  }, {\n    key: 'getNextAutoUpdateDelay',\n    value: function getNextAutoUpdateDelay() {\n      var _props = this.props,\n          date = _props.date,\n          timeStyle = _props.timeStyle,\n          updateInterval = _props.updateInterval; // \"Smart\" autoupdate intervals are only used for standard time styles.\n\n      if ((typeof timeStyle === 'undefined' ? 'undefined' : _typeof(timeStyle)) === 'object') {\n        return updateInterval;\n      }\n\n      var time = getTime(date);\n      var now = Date.now();\n      var diff = Math.abs(now - time);\n\n      var _interval = void 0;\n\n      for (var _iterator = INTERVALS, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _ref2 = _ref,\n            interval = _ref2.interval,\n            threshold = _ref2.threshold;\n\n        if (threshold && diff < threshold) {\n          continue;\n        }\n\n        _interval = interval;\n      }\n\n      return Math.min(_interval, SET_TIMEOUT_MAX_DELAY);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          _date = _props2.date,\n          timeStyle = _props2.timeStyle,\n          tooltip = _props2.tooltip,\n          container = _props2.container,\n          locale = _props2.locale,\n          locales = _props2.locales,\n          formatVerboseDate = _props2.formatVerboseDate,\n          verboseDateFormat = _props2.verboseDateFormat,\n          updateInterval = _props2.updateInterval,\n          tick = _props2.tick,\n          rest = _objectWithoutProperties(_props2, ['date', 'timeStyle', 'tooltip', 'container', 'locale', 'locales', 'formatVerboseDate', 'verboseDateFormat', 'updateInterval', 'tick']); // The date or timestamp that was passed.\n      // Convert timestamp to `Date`.\n\n\n      var date = getDate(_date); // Format verbose date for the tooltip.\n      // (only on client side, because tooltips aren't rendered until triggered)\n\n      var verboseDate = typeof window === 'undefined' ? undefined : this.getVerboseDate(date);\n      var timeAgo = React.createElement('time', _extends({\n        dateTime: date.toISOString(),\n        title: tooltip ? verboseDate : undefined\n      }, rest), this.timeAgo.format(date, timeStyle));\n\n      if (container) {\n        return React.createElement(container, _extends({\n          verboseDate: verboseDate\n        }, rest), timeAgo);\n      }\n\n      return timeAgo;\n    } // Composes a list of preferred locales\n\n  }, {\n    key: 'getPreferredLocales',\n    value: function getPreferredLocales() {\n      var locale = this.props.locale;\n      var locales = this.props.locales; // Convert `locale` to `locales`.\n\n      if (locale) {\n        locales = [locale];\n      } // `javascript-time-ago` default locale.\n\n\n      return locales.concat(JavascriptTimeAgo.getDefaultLocale());\n    } // Verbose date string.\n    // Is used as a tooltip text.\n    //\n    // E.g. \"Sunday, May 18th, 2012, 18:45\"\n    //\n\n  }, {\n    key: 'getVerboseDate',\n    value: function getVerboseDate(input) {\n      var formatVerboseDate = this.props.formatVerboseDate;\n\n      if (formatVerboseDate) {\n        return formatVerboseDate(convertToDate(input));\n      }\n\n      return this.formatVerboseDate(convertToDate(input));\n    }\n  }]);\n\n  return ReactTimeAgo;\n}(PureComponent);\n\nexport default ReactTimeAgo;\nReactTimeAgo.propTypes = {\n  // The `date` or `timestamp`.\n  // E.g. `new Date()` or `1355972400000`.\n  date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.number]).isRequired,\n  // Preferred locale.\n  // Is 'en' by default.\n  // E.g. 'ru-RU'.\n  locale: PropTypes.string,\n  // Preferred locales (ordered).\n  // Will choose the first suitable locale from this list.\n  // (the one that has been initialized)\n  // E.g. `['ru-RU', 'en-GB']`.\n  locales: PropTypes.arrayOf(PropTypes.string),\n  // Date/time formatting style.\n  // E.g. 'twitter', 'time', or custom (`{ gradation: […], units: […], flavour: 'long', custom: function }`)\n  timeStyle: style,\n  // Whether HTML `tooltip` attribute should be set\n  // to verbosely formatted date (is `true` by default).\n  // Set to `false` to disable the native HTML `tooltip`.\n  tooltip: PropTypes.bool.isRequired,\n  // An optional function returning what will be output in the HTML `title` tooltip attribute.\n  // (by default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`)\n  formatVerboseDate: PropTypes.func,\n  // `Intl.DateTimeFormat` format for the HTML `title` tooltip attribute.\n  // Is used when `formatVerboseDate` is not specified.\n  // By default outputs a verbose date.\n  verboseDateFormat: PropTypes.object,\n  // How often to update all `<ReactTimeAgo/>` elements on a page.\n  // (is once in a minute by default)\n  // This setting is only used for \"custom\" `timeStyle`s.\n  // For standard `timeStyle`s, \"smart\" autoupdate interval is used:\n  // every minute for the first hour, then every 10 minutes for the first 12 hours, and so on.\n  updateInterval: PropTypes.number,\n  // Set to `false` to disable automatic refresh of\n  // `<ReactTimeAgo/>` elements on a page as time goes by.\n  // (is `true` by default)\n  tick: PropTypes.bool,\n  // React Component to wrap the resulting `<time/>` React Element.\n  // Receives `verboseDate` and `children` properties.\n  // `verboseDate` can be used for displaying verbose date label\n  // in an \"on mouse over\" (or \"on touch\") tooltip.\n  //\n  // ```js\n  // import React from 'react'\n  // import ReactTimeAgo from 'react-time-ago'\n  // import { Tooltip } from 'react-responsive-ui'\n  // \n  // export default function TimeAgo(props) {\n  //   return <ReactTimeAgo {...props} container={Container} tooltip={false}/>\n  // }\n  // \n  // const Container = ({ verboseDate, children }) => (\n  //   <Tooltip content={verboseDate}>\n  //     {children}\n  //   </Tooltip>\n  // )\n  // ```\n  //\n  container: PropTypes.func\n};\nReactTimeAgo.defaultProps = {\n  // No preferred locales.\n  locales: [],\n  // Show verbose date `title` tooltip on mouse over.\n  tooltip: true,\n  // Thursday, December 20, 2012, 7:00:00 AM GMT+4\n  verboseDateFormat: {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    second: '2-digit' // timeZoneName : 'short'\n\n  },\n  // Updates once a minute\n  updateInterval: MINUTE,\n  // Refreshes time in a web browser by default\n  tick: true // Converts argument into a `Date`.\n\n};\n\nfunction convertToDate(input) {\n  if (input.constructor === Date || isMockedDate(input)) {\n    return input;\n  }\n\n  if (typeof input === 'number') {\n    return new Date(input);\n  }\n\n  throw new Error('Unsupported react-time-ago input: ' + (typeof input === 'undefined' ? 'undefined' : _typeof(input)) + ', ' + input);\n} // Deprecated CDN legacy export.\n// Will be removed in version 6.x\n\n\nReactTimeAgo.default = ReactTimeAgo; // ReactTimeAgo.addLocale = (data) => JavascriptTimeAgo.addLocale(data)","map":{"version":3,"sources":["../source/ReactTimeAgo.js"],"names":["PureComponent","React","MINUTE","HOUR","DAY","MONTH","YEAR","INTERVALS","interval","threshold","SET_TIMEOUT_MAX_DELAY","ReactTimeAgo","verboseDateFormat","createVerboseDateFormatter","tick","clearTimeout","date","timeStyle","updateInterval","time","getTime","now","Date","diff","Math","_interval","_date","tooltip","container","locale","locales","formatVerboseDate","rest","getDate","verboseDate","timeAgo","undefined","JavascriptTimeAgo","input","convertToDate","PropTypes","func","weekday","day","month","year","hour","minute","second","isMockedDate"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport JavascriptTimeAgo from 'javascript-time-ago'\r\nimport { style } from 'javascript-time-ago/prop-types'\r\n\r\nimport createVerboseDateFormatter from './verboseDateFormatter'\r\nimport { getDate, getTime, isMockedDate } from './helpers/date'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\nconst MINUTE = 60 * 1000\r\nconst HOUR = 60 * MINUTE\r\nconst DAY = 24 * HOUR\r\nconst MONTH = 30 * DAY\r\nconst YEAR = 365 * DAY\r\n\r\n// For standard `timeStyle`s, \"smart\" autoupdate interval is used:\r\n// every minute for the first hour, then every 10 minutes for the first 12 hours, and so on.\r\n// \"Smart\" autoupdate intervals should be moved to `javascript-time-ago`'s grading scale.\r\nconst INTERVALS = [{\r\n\tinterval: MINUTE\r\n}, {\r\n\tthreshold: HOUR,\r\n\tinterval: 10 * MINUTE\r\n}, {\r\n\tthreshold: 12 * HOUR,\r\n\tinterval: 20 * MINUTE\r\n}, {\r\n\tthreshold: DAY,\r\n\tinterval: 3 * HOUR\r\n}, {\r\n\tthreshold: 7 * DAY,\r\n\tinterval: 6 * HOUR\r\n}, {\r\n\tthreshold: MONTH,\r\n\tinterval: 5 * DAY\r\n}, {\r\n\tthreshold: 3 * MONTH,\r\n\tinterval: 10 * DAY\r\n}, {\r\n\tthreshold: YEAR,\r\n\tinterval: MONTH\r\n}]\r\n\r\n// `setTimeout()` would enter an infinite cycle when interval is a `MONTH`.\r\n// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values\r\nconst SET_TIMEOUT_MAX_DELAY = 2147483647\r\n\r\nexport default class ReactTimeAgo extends PureComponent {\r\n\tconstructor(props) {\r\n\t\t// `this.props` are used in `.getPreferredLocales()`.\r\n\t\tsuper(props)\r\n\t\t// Create `javascript-time-ago` formatter instance.\r\n\t\tthis.timeAgo = new JavascriptTimeAgo(this.getPreferredLocales())\r\n\t\t// Create verbose date formatter for the tooltip text.\r\n\t\t// (only on client side, because tooltips aren't rendered until triggered)\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\tconst { verboseDateFormat } = this.props\r\n\t\t\tthis.formatVerboseDate = createVerboseDateFormatter(this.getPreferredLocales(), verboseDateFormat)\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { tick } = this.props\r\n\t\t// If time label autoupdates are enabled.\r\n\t\tif (tick) {\r\n\t\t\tthis.scheduleNextTick()\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearTimeout(this.autoUpdateTimer)\r\n\t}\r\n\r\n\tscheduleNextTick() {\r\n\t\t// Register for the relative time autoupdate as the time goes by.\r\n\t\tthis.autoUpdateTimer = setTimeout(() => {\r\n\t\t\tthis.forceUpdate()\r\n\t\t\tthis.scheduleNextTick()\r\n\t\t}, this.getNextAutoUpdateDelay())\r\n\t}\r\n\r\n\tgetNextAutoUpdateDelay() {\r\n\t\tconst { \r\n\t\t\tdate, \r\n\t\t\ttimeStyle, \r\n\t\t\tupdateInterval \r\n\t\t} = this.props\r\n\t\t// \"Smart\" autoupdate intervals are only used for standard time styles.\r\n\t\tif (typeof timeStyle === 'object') {\r\n\t\t\treturn updateInterval\r\n\t\t}\r\n\t\tconst time = getTime(date)\r\n\t\tconst now = Date.now()\r\n\t\tconst diff = Math.abs(now - time)\r\n\t\tlet _interval\r\n\t\tfor (const { interval, threshold } of INTERVALS) {\r\n\t\t\tif (threshold && diff < threshold) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\t_interval = interval\r\n\t\t}\r\n\t\treturn Math.min(_interval, SET_TIMEOUT_MAX_DELAY)\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tdate: _date,\r\n\t\t\ttimeStyle,\r\n\t\t\ttooltip,\r\n\t\t\tcontainer,\r\n\t\t\t// Rest\r\n\t\t\tlocale,\r\n\t\t\tlocales,\r\n\t\t\tformatVerboseDate,\r\n\t\t\tverboseDateFormat,\r\n\t\t\tupdateInterval,\r\n\t\t\ttick,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\t// The date or timestamp that was passed.\r\n\t\t// Convert timestamp to `Date`.\r\n\t\tconst date = getDate(_date)\r\n\r\n\t\t// Format verbose date for the tooltip.\r\n\t\t// (only on client side, because tooltips aren't rendered until triggered)\r\n\t\tconst verboseDate = typeof window === 'undefined' ? undefined : this.getVerboseDate(date)\r\n\r\n\t\tconst timeAgo = (\r\n\t\t\t<time\r\n\t\t\t\tdateTime={date.toISOString()}\r\n\t\t\t\ttitle={tooltip ? verboseDate : undefined} \r\n\t\t\t\t{...rest}>\r\n\t\t\t\t{this.timeAgo.format(date, timeStyle)}\r\n\t\t\t</time>\r\n\t\t)\r\n\r\n\t\tif (container) {\r\n\t\t\treturn React.createElement(\r\n\t\t\t\tcontainer,\r\n\t\t\t\t{\r\n\t\t\t\t\tverboseDate,\r\n\t\t\t\t\t...rest\r\n\t\t\t\t},\r\n\t\t\t\ttimeAgo\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn timeAgo\r\n\t}\r\n\r\n\t// Composes a list of preferred locales\r\n\tgetPreferredLocales() {\r\n\t\tconst { locale } = this.props\r\n\t\tlet { locales } = this.props\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\t\t// `javascript-time-ago` default locale.\r\n\t\treturn locales.concat(JavascriptTimeAgo.getDefaultLocale())\r\n\t}\r\n\r\n\t// Verbose date string.\r\n\t// Is used as a tooltip text.\r\n\t//\r\n\t// E.g. \"Sunday, May 18th, 2012, 18:45\"\r\n\t//\r\n\tgetVerboseDate(input) {\r\n\t\tconst { formatVerboseDate } = this.props\r\n\t\tif (formatVerboseDate) {\r\n\t\t\treturn formatVerboseDate(convertToDate(input))\r\n\t\t}\r\n\t\treturn this.formatVerboseDate(convertToDate(input))\r\n\t}\r\n}\r\n\r\nReactTimeAgo.propTypes = {\r\n\t// The `date` or `timestamp`.\r\n\t// E.g. `new Date()` or `1355972400000`.\r\n\tdate: PropTypes.oneOfType([\r\n\t\tPropTypes.instanceOf(Date),\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\r\n\t// Preferred locale.\r\n\t// Is 'en' by default.\r\n\t// E.g. 'ru-RU'.\r\n\tlocale: PropTypes.string,\r\n\r\n\t// Preferred locales (ordered).\r\n\t// Will choose the first suitable locale from this list.\r\n\t// (the one that has been initialized)\r\n\t// E.g. `['ru-RU', 'en-GB']`.\r\n\tlocales: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t// Date/time formatting style.\r\n\t// E.g. 'twitter', 'time', or custom (`{ gradation: […], units: […], flavour: 'long', custom: function }`)\r\n\ttimeStyle: style,\r\n\r\n\t// Whether HTML `tooltip` attribute should be set\r\n\t// to verbosely formatted date (is `true` by default).\r\n\t// Set to `false` to disable the native HTML `tooltip`.\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\r\n\t// An optional function returning what will be output in the HTML `title` tooltip attribute.\r\n\t// (by default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`)\r\n\tformatVerboseDate: PropTypes.func,\r\n\r\n\t// `Intl.DateTimeFormat` format for the HTML `title` tooltip attribute.\r\n\t// Is used when `formatVerboseDate` is not specified.\r\n\t// By default outputs a verbose date.\r\n\tverboseDateFormat: PropTypes.object,\r\n\r\n\t// How often to update all `<ReactTimeAgo/>` elements on a page.\r\n\t// (is once in a minute by default)\r\n\t// This setting is only used for \"custom\" `timeStyle`s.\r\n\t// For standard `timeStyle`s, \"smart\" autoupdate interval is used:\r\n\t// every minute for the first hour, then every 10 minutes for the first 12 hours, and so on.\r\n\tupdateInterval: PropTypes.number,\r\n\r\n\t// Set to `false` to disable automatic refresh of\r\n\t// `<ReactTimeAgo/>` elements on a page as time goes by.\r\n\t// (is `true` by default)\r\n\ttick: PropTypes.bool,\r\n\r\n\t// React Component to wrap the resulting `<time/>` React Element.\r\n\t// Receives `verboseDate` and `children` properties.\r\n\t// `verboseDate` can be used for displaying verbose date label\r\n\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t//\r\n\t// ```js\r\n\t// import React from 'react'\r\n\t// import ReactTimeAgo from 'react-time-ago'\r\n\t// import { Tooltip } from 'react-responsive-ui'\r\n\t// \r\n\t// export default function TimeAgo(props) {\r\n\t//   return <ReactTimeAgo {...props} container={Container} tooltip={false}/>\r\n\t// }\r\n\t// \r\n\t// const Container = ({ verboseDate, children }) => (\r\n\t//   <Tooltip content={verboseDate}>\r\n\t//     {children}\r\n\t//   </Tooltip>\r\n\t// )\r\n\t// ```\r\n\t//\r\n\tcontainer: PropTypes.func\r\n}\r\n\r\nReactTimeAgo.defaultProps = {\r\n\t// No preferred locales.\r\n\tlocales: [],\r\n\r\n\t// Show verbose date `title` tooltip on mouse over.\r\n\ttooltip: true,\r\n\r\n\t// Thursday, December 20, 2012, 7:00:00 AM GMT+4\r\n\tverboseDateFormat: {\r\n\t\tweekday      : 'long',\r\n\t\tday          : 'numeric',\r\n\t\tmonth        : 'long',\r\n\t\tyear         : 'numeric',\r\n\t\thour         : 'numeric',\r\n\t\tminute       : '2-digit',\r\n\t\tsecond       : '2-digit',\r\n\t\t// timeZoneName : 'short'\r\n\t},\r\n\r\n\t// Updates once a minute\r\n\tupdateInterval: MINUTE,\r\n\r\n\t// Refreshes time in a web browser by default\r\n\ttick: true\r\n}\r\n\r\n// Converts argument into a `Date`.\r\nfunction convertToDate(input) {\r\n\tif (input.constructor === Date || isMockedDate(input)) {\r\n\t\treturn input\r\n\t}\r\n\tif (typeof input === 'number') {\r\n\t\treturn new Date(input)\r\n\t}\r\n\tthrow new Error(`Unsupported react-time-ago input: ${typeof input}, ${input}`)\r\n}\r\n\r\n// Deprecated CDN legacy export.\r\n// Will be removed in version 6.x\r\nReactTimeAgo.default = ReactTimeAgo\r\n\r\n// ReactTimeAgo.addLocale = (data) => JavascriptTimeAgo.addLocale(data)"]},"metadata":{},"sourceType":"module"}